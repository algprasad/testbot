<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- TBD need to make a testbot version of this -->
    <arg name="world_name" value="$(find testbot_gazebo)/worlds/testbot.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <group if="true">
  
  
  <group ns="testbot">
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find testbot_description)/urdf/testbot.xacro'" />
  
  
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
       args="-urdf -model testbot -z 1 -param robot_description"/>
  </group>
  
  <!-- ros_control testbot launch file -->
  <include file="$(find testbot_gazebo_control)/launch/testbot_gazebo_control.launch" />

  </group>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <group if="false">
  
  <group ns="testbot">
    <!-- this block doesn't work because gazebo_ros_control is still  waiting for robot_description -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	  args="-urdf -model testbot -z 0.5 -file $(find testbot_description)/urdf/testbot.urdf"/>
  </group> 
  </group>
</launch>
